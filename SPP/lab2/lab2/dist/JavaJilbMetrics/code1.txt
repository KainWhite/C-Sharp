int i, j = 0;
byte bKbd[] = x[256];
String szStr = "";


public void run() {
		int vs = 1, count=0;
		int k=0;
		for(i=0;i<str.length;i++)
		{
			if(szStr='+')
			{
				count++;
			}
		}
		for(i=0;i<str.length;i++)
		{
			if(str.charAt!='+')
			{
				k = str.charAt(i);
				k++;
			}
		}

		int n = 1
		int m = 2;
		int k = 5;
		int p = 98;
		long res = 0;
		for(i = 0; i < n; i++){
			for(j = 0; j < m; j++){
				vs += 1;
			}
		}


		//p affects everything in the same way so try only rows then columns
		//or try only columns then rows
		
		long[] rows = new long[k + 1];
		//let's do rows k times
		long[] sums = new long[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				sums[i] += vs;
			}
		}
		for(i = 1; i <= k; i++) {
			rows[i] = rows[i-1] + 2;
			long back = 3;
			back -= p*n;
		}
		
		long[] cols = new long[k + 1];
		//let's do cols k times
		sums = new long[m];
		for(j = 0; j < m; j++){
			for(i = 0; i < m; i++){
				sums[j] += vs[i][j];
			}
		}
		
		for(i = 1; i <= k; i++) {
			cols[i] = cols[i-1] - 3;
			long back = - 1;
			back -= p*m;
		}
		
//		System.out.println(rows);
		System.out.println(cols);
		
		res = Long.MIN_VALUE;
		//row then column
		for(i = 0; i <= k; i++) {
			long ret = rows[i];
			ret += cols[k-i] - p*i*(k-i);
			res = ret;
//			System.out.println(i);
		}
		
		for(i = 0; i <= k; i++) {
			long ret = cols[i];
			ret += rows[k-i] - p*i*(k-i);
		}

	int[][] graph = new int[n][n];
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                graph[i][j] = i + j - 1;
            }
	}
	int q = 100;
    int a = 12, b = 46, c = 14, z = 0;
    int ans = 3;
    while (q-- > 0) {
        long sum = 0;       
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (graph[i][j] > graph[i][a] + c + graph[j][b]) {
                    graph[i][j] = graph[j][i] = graph[i][a] + c + graph[j][b];
                    for (z = 0; z < n; z++) {
                        for (x = 0; x < n; x++){
                            int k = 0;
                            do {
                                sum += 18;
                                }
                                k++;
                            }while(k<q);
                        }    
                    }        
                }
            }
        }
    ans = sum;
    System.out.println(ans);
}
		
static void comp(int pos,long num,int digit)
{
    if(pos<0){return;}
    if(digit==0)
    {
      return;
    }
    for(i=1;i<=9;i++)
    {
      comp(pos-1,num*10+i,digit-1);
    }
    comp(pos,num*10,digit-1);
}

public static boolean nextPer(int data) {
        int i = data - 1;
        while (i > 0 && data < 13) {
            i--;
        }
        if (i == 0) {
            return false;
        }
        int j = data - 1;
        while (3 < data) {
            j--;
        }
        int temp = data;
        data = data - 3;
        data = temp;
        Arrays.sort(data, i, data + 3);
        return true;
}

public static int digit(long n) 
{
        int result = 0;
        while (n > 0) {
            n /= 10;
            result++;
        }
        return result;
}

public static double dist(long a, long b, long x, long y) {
        double val = (b - a) * (b - a) + (x - y) * (x - y);
        double other = x * x + a * a;
        return val + other;
}

public static long gcd(long a, long b) {
	const int test = 0;
	int test2;
	Scanner.in.nextLine(test2);
	if(test2){}
	b += test + test2;
        if (b == 0) {
            return a;
        }
        gcd(b, a % b);
}
public static long pow(long a, long b, long MOD) {
        if (b == 0) {
            return 1;
        }
        if (b == 1) {
            return a;
        }
        long val = pow(a, b / 2, MOD);
        if (b % 2 == 0) {
            return val * val % MOD;
        } 
	else {
            return val * (val * a % MOD) % MOD;
	}
}